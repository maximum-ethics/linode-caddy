---
- name: include local TLS file when testing
  include_vars: local_tls.yml
  when: local_tls
  tags: always

- name: install latest Hugo .deb from Github
  apt:
    deb: "{{ hugo_deb_url }}"
  when: ansible_os_family == 'Debian'

# TODO: Create our own apt repository for Caddy and Hugo
# Or possibly take over the packages in Arch to make sure they stay up to date

- name: install Caddyfile from template
  template:
    src: '{{ caddyfile_name }}'
    dest: /etc/caddy/Caddyfile
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload caddy

# Create site directories
- name: create srv directory if it doesn't exist
  file:
    path: /srv/{{ item.domain }}/{{ item.subdomain }}/public
    state: directory
    mode: 0755
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
  loop: "{{ hugo_sites }}"
  register: output

- name: Create new Hugo site
  # item.item is used because we're iterating over the registered results from creating the directories.
  # see https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#registering-variables-with-a-loop for results structure
  # If directory is created, the command is run and item is loop variable containing results, item.item is the hugo_site from prior step.
  # LOL this is way easier https://docs.ansible.com/ansible/latest/modules/command_module.html
  command: hugo new site /srv/{{ item.item.domain }}/{{ item.item.subdomain }}/public
  loop: "{{ output.results }}"
  become: yes
  become_user: '{{ web_server_user }}'
  when: item.changed == true

- name: clone git theme
  git:
    repo: "{{ item.theme_repo }}"
    dest: /srv/{{ item.domain }}/{{ item.subdomain }}/public/themes/{{ item.theme_name }}
  loop: "{{ hugo_sites }}"
  become: yes
  become_user: '{{ web_server_user }}'
  register: theme_changes

- name: create config.toml file from template
  template:
    src: config.toml.j2
    dest: /srv/{{ item.domain }}/{{ item.subdomain }}/public/config.toml
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
  loop: "{{ hugo_sites }}"
  register: config_changes

- name: print theme_changes
  debug:
    var: theme_changes
- name: print config_changes
  debug:
    var: config_changes

- name: decide which sites to reload
  set_fact:
    regen_sites: "{{ theme_changes.results + config_changes.results | default([]) + [item.item] }}"
  when: item.changed == true

- name: re-generate Hugo site
  command: hugo
  args:
    chdir: /srv/{{ item.domain }}/{{ item.subdomain }}/public
  loop: regen_sites