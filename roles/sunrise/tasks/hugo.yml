---
- name: install latest Hugo .deb from Github
  apt:
    deb: "{{ hugo_deb_url }}"
  when: ansible_os_family == 'Debian'

# TODO: Create our own apt repository for Caddy and Hugo
# Or possibly help maintain the packages in Arch to make sure they stay up to date

- name: install Caddyfile from template
  template:
    src: '{{ caddyfile_name }}'
    dest: /etc/caddy/Caddyfile
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload caddy

# Create site directories
- name: create srv directory if it doesn't exist
  file:
    path: /srv/{{ item.domain }}/{{ item.subdomain }}/public
    state: directory
    mode: 0755
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
  loop: "{{ hugo_sites }}"
  register: created_directories

- name: print created_directories
  debug:
    var: created_directories

  # item.item is used because we're iterating over the registered results from creating the directories.
  # see https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#registering-variables-with-a-loop for results structure
  
  # Create Site Directories task loops over hugo_sites to make directories for each element of the hugo_sites array (a Hugo website). 
  # The output of each loop iteration is stored in created_directories.
  # Each output item in created_directories has a subelement named item, 
  # which stores the hugo_sites element that the Create Site Directories task was run on.
  # Thus, in this task, item refers to the loop output collection of metadata, 
  # item.item is the subelement that contains the hugo_sites element previously described.
- name: Create new Hugo site
  command: hugo new site /srv/{{ item.item.domain }}/{{ item.item.subdomain }}/public
  loop: "{{ created_directories.results }}"
  become: yes
  become_user: '{{ web_server_user }}'
  when: item.changed == true

- name: clone git theme
  git:
    repo: "{{ item.theme_repo }}"
    dest: /srv/{{ item.domain }}/{{ item.subdomain }}/public/themes/{{ item.theme_name }}
  loop: "{{ hugo_sites }}"
  become: yes
  become_user: '{{ web_server_user }}'
  register: theme_changes

- name: create config.toml file from template
  template:
    src: config.toml.j2
    dest: /srv/{{ item.domain }}/{{ item.subdomain }}/public/config.toml
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
  loop: "{{ hugo_sites }}"
  register: config_changes

- name: print theme_changes
  debug:
    var: theme_changes
- name: print config_changes
  debug:
    var: config_changes

- name: set regen_sites default value
  set_fact:
    regen_sites: "{{ default([], true) }}"

- name: print regen_sites
  debug:
    var: regen_sites

# TODO: fix this failing task: https://github.com/sunrisemovement/devops/issues/11
# UPDATE: still extremely broken
- name: decide which sites to reload
  set_fact:
    regen_sites: "{{ regen_sites | default([], true) + [item.item] }}"
    #regen_sites: "{{ [0] | map('extract', (theme_changes.results + config_changes.results) | selectattr('changed', 'true') | list ) | list }}"
    #regen_sites: "{{( theme_changes.results + config_changes.results) | selectattr('changed', 'true') | list }}"
    when: item.changed
    loop: "{{ (theme_changes.results + config_changes.results) | selectattr('changed', 'true') | list }}"
    
- name: print regen_sites
  debug:
    var: regen_sites

# - name: re-generate Hugo site
#   command: hugo
#   args:
#     chdir: /srv/{{ item.domain }}/{{ item.subdomain }}/public
#   loop: theme_changes
#   when: item.changed == true