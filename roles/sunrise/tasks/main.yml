# first, if you want to use Arch Linux, run locally:
# ansible-galaxy install kewlfft.aur
# https://github.com/kewlfft/ansible-aur

- name: Include OS-specific variables
  include_vars: "{{ ansible_distribution }}.yml"
  tags: always

- name: include local TLS file when testing
  include_vars: local_tls.yml
  when: local_tls
  tags: always

- name: update apt sources + upgrade packages
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: safe
  tags: updategrade
  when: ansible_os_family == 'Debian'

- name: update pacman sources + upgrade packages
  pacman:
    update_cache: yes
    upgrade: yes
  tags: updategrade
  when: ansible_os_family == 'Archlinux'

- name: upgrade AUR packages
  aur:
    upgrade: yes
    aur_only: yes
  tags: updategrade
  when: 
    - ansible_os_family == 'Archlinux'
    - aur_packages is defined  

# TODO: Also update packages installed from other sources, such as pip
# linode_create.yml installs linode-api4 from pip

- name: install common packages, shared by all OSes
  package:
    name: '{{ item }}'
  loop: "{{ common_packages }}"
  tags: initial_packages
- name: install packages specific to each OS
  package:
    name: '{{ item }}'
  loop: "{{ os_packages }}"
  tags: initial_packages
  when: os_packages is defined

- user:
    name: aur_builder
  tags: aur_builder
  when: 
    - ansible_os_family == 'Archlinux'
    - aur_packages is defined 
- lineinfile:
    path: /etc/sudoers.d/11-install-aur_builder
    line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
    create: yes
    validate: 'visudo -cf %s'
  tags: aur_builder
  when: 
    - ansible_os_family == 'Archlinux'
    - aur_packages is defined

# first, log into the server and run:
# sudo -u aur_builder gpg --keyserver pool.sks-keyservers.net --receive-keys 29D0817A67156E4F25DC24782A349DD577D586A5
# Otherwise Caddy2 package won't work:
# https://aur.archlinux.org/packages/caddy2/
- name: install AUR packages
  aur:
    name: '{{ item }}'
  loop: '{{ aur_packages }}'
  become: yes
  become_user: aur_builder
  tags: aur_packages
  when: 
    - ansible_os_family == 'Archlinux'
    - aur_packages is defined

- name: Add limited user accounts for all Sunrise sysadmins
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    shell: "{{ item.shell }}"
    groups: "{{ sudoing_group }}"
    update_password: on_create
  loop: "{{ users }}"
  tags: user_accounts

- name: Add ssh keys for all Sunrise sysadmins
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
# old syntax for doing loop with subelements:
# https://docs.ansible.com/ansible/latest/plugins/lookup/subelements.html
  # with_subelements:
  #   - "{{ users }}"
  #   - sshKey
# new syntax described here:
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#with-subelements
  loop: "{{ users|subelements('sshKey') }}"
  tags: authorized_keys

# first, put local_hostname in ansible inventory
# linode_create.yml does this automatically, but (for now) only for the person creating the server
- name: set system's hostname
  hostname:
    name: "{{ local_hostname }}"
  tags: hostname
- name: print hostname
  debug:
    msg: Inventory item {{ inventory_hostname }} has hostname {{ ansible_hostname }}
    verbosity: 1
  tags: hostname

- name: print datetime before setting timezone
  debug:
    var: ansible_date_time
    verbosity: 1
  tags: timezone
# to get list of possible timezones, run "timedatectl list-timezones"
- name: set timezone to NYC
  timezone:
    name: America/New_York
    # name: America/Los_Angeles
  tags: timezone
  notify:
    - print time

- name: configure firewall using UFW
# Maybe I should use iptables directly, but it's easier/simpler to set up UFW
# persistently using Ansible, so let's try it for now.
  import_tasks: ufw.yml
  tags: ufw

# TODO: fail2ban?

- name: customize the message of the day when logging in to the server
  import_tasks: motd.yml
  tags: motd

- name: print OS info
  debug:
    msg: This server is running the {{ ansible_distribution }} distribution in the {{ ansible_os_family }} OS family.
    verbosity: 1
  tags: caddy
- name: setup Caddy V2 web server
  import_tasks: caddy.yml
  tags: caddy

- name: set up some handcoded websites
  import_tasks: new_handcoded.yml
  tags: new_handcoded

# Hugo playbook doesn't work yet
- name: set up Hugo websites
  import_tasks: hugo.yml
  tags: hugo

# TODO: set up Longview - record and view stats, data to help diagnose problems

# TODO: set up e-mail so unattend-upgrades, Wordpress etc. can mail you
# - name: install postfix
#   apt:
#     name: postfix

# TODO: install Wordpress
