- name: Include OS-specific variables
  include_vars: "{{ ansible_distribution }}.yml"
  tags:
  - always
  - local

- name: include local TLS file when testing
  include_vars: local_tls.yml
  when: local_tls
  tags:
  - always
  - local

- name: remove packages
  package:
    name: '{{ item }}'
    state: absent
  loop: '{{ uninstall_packages }}'
  tags:
  - remove_packages
  - local
  when: uninstall_packages is defined

- name: upgrade RPM packages
  dnf:
    name: "*"
    state: latest
  tags:
  - updategrade
  - local
  when: ansible_os_family == 'RedHat'

- name: update apt sources + upgrade packages
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: safe
  tags:
  - updategrade
  - local
  when: ansible_os_family == 'Debian'

- name: update pacman sources + upgrade packages
  pacman:
    update_cache: yes
    upgrade: yes
  tags:
  - updategrade
  - local
  when: ansible_os_family == 'Archlinux'

- name: update apk sources + upgrade packages
  apk:
    update_cache: yes
    upgrade: yes
  tags:
  - updategrade
  - local
  when: ansible_os_family == 'Alpine'

# TODO: Also update packages installed from other sources, such as pip
# linode_create.yml installs linode-api4 from pip

- name: install common packages, shared by all OSes
  package:
    name: '{{ item }}'
  loop: "{{ common_packages }}"
  tags:
  - initial_packages
  - local

- name: install packages specific to each OS
  package:
    name: '{{ item }}'
  loop: "{{ os_packages }}"
  tags:
  - initial_packages
  - local
  when: os_packages is defined

- name: Add limited user accounts for all sysadmins
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    shell: "{{ item.shell }}"
    groups: "{{ sudoing_group }},mcfadden"
    update_password: on_create
  loop: "{{ users }}"
  tags: user_accounts

- name: Add ssh keys for all sysadmins
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
# old syntax for doing loop with subelements:
# https://docs.ansible.com/ansible/latest/plugins/lookup/subelements.html
  # with_subelements:
  #   - "{{ users }}"
  #   - sshKey
# new syntax described here:
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#with-subelements
  loop: "{{ users|subelements('sshKey') }}"
  tags: authorized_keys

# first, put local_hostname in ansible inventory
# linode_create.yml does this automatically, but (for now) only for the person creating the server
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/hostname_module.html
- name: set system's hostname
  hostname:
    name: "{{ local_hostname }}"
    # use: redhat # required on Alpine Linux: https://github.com/ansible/ansible/issues/77363
    # only for Ansible versions < 2.12.5 tho?
    # This workaround may have stopped working in 2.12.5 w/o the bug being fixed
  tags:
  - hostname
  # when: ansible_os_family != 'Alpine'

# - name: pop OS hostname
#   hostname:
#     name: "{{ local_hostname }}"
#     use: systemd
#   tags:
#   - hostname
#   - local
# - name: print hostname
#   debug:
#     msg: Inventory item {{ inventory_hostname }} has hostname {{ ansible_hostname }}
#     verbosity: 1
#   tags:
#   - hostname
#   - local

- name: print datetime before setting timezone
  debug:
    var: ansible_date_time
    verbosity: 1
  tags:
  - timezone
  - local
# to get list of possible timezones, run "timedatectl list-timezones"
- name: set timezone (from inventory)
  timezone:
    name: "{{ local_timezone }}"
    # name: America/Chicago
  tags:
  - timezone
  notify:
  - print time

- name: configure firewall using UFW
# Maybe I should use iptables directly, but it's easier/simpler to set up UFW
# persistently using Ansible, so let's try it for now.
  import_tasks: ufw.yml
  tags:
  - ufw
  when: ansible_os_family != 'Alpine'
# this is bad, we'll need a firewall before we use Alpine in production

# TODO: fail2ban?

- name: customize the message of the day when logging in to the server
  import_tasks: motd.yml
  tags: motd

- name: print OS info
  debug:
    msg: This server is running the {{ ansible_distribution }} distribution in the {{ ansible_os_family }} OS family.
    verbosity: 1
  tags:
  - caddy
#   - local
- name: setup Caddy V2 web server
  import_tasks: caddy.yml
  tags:
  - caddy
#   - local

- name: set up some handcoded websites
  import_tasks: new_handcoded.yml
  tags:
  - new_handcoded
#   - local

- name: install Node
  import_tasks: node.yml
  tags:
  - node
  when: ansible_os_family == 'Debian'

- name: set up Hugo websites
  import_tasks: hugo.yml
  tags:
  - hugo
#   - local

# TODO: set up Longview - record and view stats, data to help diagnose problems

# TODO: set up e-mail so unattend-upgrades, Wordpress etc. can mail you
# - name: install postfix
#   apt:
#     name: postfix

# TODO: install Wordpress
# - name: set up static archives of Wordpress sites
#   import_tasks: static_wordpress.yml
#   tags:
#   - static_wordpress
