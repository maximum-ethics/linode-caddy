# tips for systemd services: https://caddyserver.com/docs/install#debian-ubuntu-raspbian
# We'll base ours off of https://github.com/caddyserver/dist/blob/master/init/caddy.service
# Another source: https://aur.archlinux.org/cgit/aur.git/tree/caddy.service?h=caddy2
- name: install caddy.service file from template
  template:
    src: caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    # Arch Linux thinks this is an executable and won't run without x
    mode: u=rwx,g=rx,o=rx
  notify:
    - daemon-reload restart caddy
  tags: caddy_service

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html
# We need Caddy to have permissions to interact with PHP
- name: Add web_server_user to http group
  user:
    name: '{{ web_server_user }}'
    groups: http
    append: yes
  when:
    - ansible_os_family == 'Archlinux'
# Can't just make them the same user because the http user's home directory is
# protected in some annoying way, so Caddy can't keep stuff there.

- name: save info about web server user (including home dir)
  user:
    name: '{{ web_server_user }}'
  register: webserver_user_registered
  tags: webserver_user_registered
- name: print home dir for web server user
  debug:
    var: webserver_user_registered.home
    verbosity: 1
  tags: webserver_user_registered
- name: print caddy storage directory
  debug:
    var: caddy_storage_dir
    verbosity: 1
  tags: webserver_user_registered

# Among other things, this is where Go will assemble Hugo modules
- name: make sure Caddy has permissions in its home dir
  file:
    path: '{{ webserver_user_registered.home }}'
    state: directory
    recurse: yes
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'

# Info on data directory location defaults:
# https://caddyserver.com/docs/conventions#data-directory
- name: create data directory # it's not just tls certificates
  file:
    path: '{{ caddy_storage_dir }}'
    state: directory
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: '0755'

# - name: copy contents of old data directory to new data dir
#   synchronize:
#     src: /etc/caddy/storage
#     dest: '{{ caddy_storage_dir }}'
#   delegate_to: '{{ inventory_hostname }}'

# defaults: https://caddyserver.com/docs/conventions#configuration-directory
- name: create folder for config autosave
  file:
    path: '{{ caddy_conf_autosave_dir }}'
    state: directory
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: '0755'
  notify:
    - restart caddy

- name: create Caddyfile config directory
  file:
    path: '{{ caddyfile_dir }}'
    state: directory
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: '0755'
- name: install Caddyfile from template
  template:
    src: '{{ caddyfile_name }}'
    dest: '{{ caddyfile_dir }}/Caddyfile'
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload caddy
  tags: caddyfile

- name: create srv directory to hold website data
  file:
    path: /srv/{{ test_domain }}/{{ test_subdomain }}/public/
    state: directory
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: 0755

- name: install test html from template
  template:
    src: index.html.j2
    dest: /srv/{{ test_domain }}/{{ test_subdomain }}/public/index.html
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: 0755
  notify:
    - reload caddy
  tags: test_website
- name: install test css
  copy:
    src: style.css
    dest: /srv/{{ test_domain }}/{{ test_subdomain }}/public/style.css
    owner: '{{ web_server_user }}'
    group: '{{ web_server_user }}'
    mode: 0755
  notify:
    - reload caddy
  tags: test_website

# https://caddyserver.com/docs/install#debian-ubuntu-raspbian
- name: Add Caddy apt key
  apt_key:
    url: https://dl.cloudsmith.io/public/caddy/stable/cfg/gpg/gpg.155B6D79CA56EA34.key
    state: present
  when: # list of conditions = AND
    - not building_caddy
    - ansible_os_family == 'Debian' or ansible_os_family == 'Pop!_OS'
- name: add Caddy deb repository
  apt_repository:
    repo: deb https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main
  when:
    - not building_caddy
    - ansible_os_family == 'Debian' or ansible_os_family == 'Pop!_OS'
- name: install Caddy from apt
  apt:
    name: caddy
  notify:
    - restart caddy
  when:
    - not building_caddy
    - ansible_os_family == 'Debian' or ansible_os_family == 'Pop!_OS'

# - name: install Caddy local CA cert
#   command: '{{ caddy_binary_location }} trust'
#   tags: caddy_trust
#   notify:
#     - restart caddy

- name: start and enable caddy service
  service:
    name: caddy
    state: started
    enabled: yes
