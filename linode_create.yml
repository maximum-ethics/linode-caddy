---
# mostly working as of August 21, 2019 :(

# tasks to create Linode from local machine using web api #
- hosts: localhost
  connection: local
  # API documentation: https://developers.linode.com/api/v4/
  vars:
    linode_label: attenborough
    linode_type: g6-nanode-1 # https://api.linode.com/v4/linode/types
    linode_region: us-east # https://api.linode.com/v4/regions
    linode_image: linode/ubuntu18.04 # https://api.linode.com/v4/images
    linode_token: "{{ sunrise_linode_token }}"
    # create Personal Access Token by clicking your profile in the upper right
    # My Profile -> API Tokens -> [+] Add a Personal Access Token
    # Give read/write access to at least Linodes if not everything else
    # Put PAT in ansible hosts file e.g. /usr/local/etc/ansible/hosts
    # under [local:vars] after defining [local] as localhost
    password: "{{ pass_attenborough }}"

  tasks:
  - name: pip install linode_api4 # Dependency for linode_v4 module
    # https://pypi.org/project/linode-api4/
    pip:
      name: linode_api4
  - name: Ensure linode is running (create if missing)
    # linode_v4 Ansible module documentation:
    # https://docs.ansible.com/ansible/latest/modules/linode_v4_module.html
    linode_v4:
      label: "{{ linode_label }}"
      type: "{{ linode_type }}"
      region: "{{ linode_region }}"
      image: "{{ linode_image }}"
      access_token: "{{ linode_token }}"
#      root_pass: "{{ password }}"
      authorized_keys:
        - "{{ ssh_pub_key }}"
      state: present
    register: created_linode

  - name: print ipv4 address
    debug:
      var: created_linode.instance.ipv4
      verbosity: 1
  - name: print ipv6 address
    debug:
      var: created_linode.instance.ipv6
      verbosity: 1
  - name: print the whole fucking thing
    debug:
      var: created_linode.instance
      verbosity: 2
  - name: print the root password
    debug:
      var: created_linode.instance.root_pass
      verbosity: 2
  - name: Remove lines with unwanted occurrences of hostname
    lineinfile:
      dest: /etc/hosts
      regexp: "^(?!{{ created_linode.instance.ipv4.0|replace('.', '\\.') }}|{{ created_linode.instance.ipv6.split('/')[0] | lower }})\\S+\\s+{{ linode_label }}$"
      state: absent
    become: true
  - name: Add the server's ipv6 address to local /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ created_linode.instance.ipv6.split('/')[0] | lower }}\t{{ linode_label }}"
      state: present
    become: true
  - name: Add the server's ipv4 address to local /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ created_linode.instance.ipv4.0 }}\t{{ linode_label }}"
      state: present
    become: true
# TODO: Clear known_hosts


# tasks on remote server once it has been created #
# TODO: DISABLE RUNNING THESE TASKS IF SERVER ALREADY EXISTED (how tho?)
- hosts: sunrise
  gather_facts: no
  vars:
    ansible_user: root

  tasks:
  - name: Don't do anything until server is reachable via SSH
    wait_for_connection:
      timeout: 120
  - name: Gather facts for first time
    setup:

  - name: include user vars
    include_vars:
      file: user_vars.yml

  - name: Disallow password authentication
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication no"
      state: present
    notify: restart ssh

# add user accounts
  - name: Add limited user accounts for all Sunrise sysadmins
    user:
      name: "{{ item.name }}"
      password: "{{ item.password }}"
      shell: "{{ item.shell }}"
      groups: sudo
      update_password: on_create
    loop: "{{ users }}"
    register: new_accounts
# TODO: Don't do this as a notify, try it as a task at the end of step 3
    notify: force change password
#########################################################################
    tags: user_password

  - name: Add ssh keys for all Sunrise sysadmins
    authorized_key:
      user: "{{ item.name }}"
      key: "{{ item.sshKey }}"
    loop: "{{ users }}"
    tags: authorized_keys

  handlers:
  - name: force change password
    command: "chage -d 0 {{ item.name }}"
    when: item.changed
    loop: "{{ new_accounts.results }}"
  - name: restart ssh
    service:
      name: ssh
      state: restarted

# tasks on remote server once it has been created #
- hosts: sunrise
  tasks:
  - name: install aptitude
    apt:
      name: aptitude
      state: present
  - name: Disallow root SSH access
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
      state: present
    notify: restart ssh

  handlers:
  - name: restart ssh
    service:
      name: ssh
      state: restarted
