---
# tasks to create Linode from local machine using web api #
- hosts: localhost
  connection: local

  tasks:
  - name: include variables
    include_vars:
      file: roles/sunrise/vars/linode.yml

# put local_hostname in /usr/local/etc/ansible/host_vars/[servername]
  - name: create host_vars directory for this hostname
    file:
      path: '{{ inventory_directory }}/host_vars/{{ linode_label }}'
      state: directory
      mode: 0755
  - name: create vars file for this server
    file:
      path: '{{ inventory_directory }}/host_vars/{{ linode_label }}/vars.yml'
      state: touch
      mode: 0644
      modification_time: preserve
      access_time: preserve
  - name: store hostname in relevant host_vars vars file
    lineinfile:
      path: '{{ inventory_directory }}/host_vars/{{ linode_label }}/vars.yml'
      regexp: '^local_hostname:'
      line: 'local_hostname: {{ linode_label }}'

# TIP: If Ansible can't find pip, check your inventory for
# ansible_python_interpreter and see if it's using the right location/version
# https://stackoverflow.com/questions/57167948/module-failed-to-start-ansible
  - name: pip install linode_api4 # Dependency for linode_v4 module
    # https://pypi.org/project/linode-api4/
    pip:
      name: linode_api4
  - name: Ensure linode is running (create if missing)
    # linode_v4 Ansible module documentation:
    # https://docs.ansible.com/ansible/latest/modules/linode_v4_module.html
    linode_v4:
      label: "{{ linode_label }}"
      type: "{{ linode_type }}"
      region: "{{ linode_region }}"
      image: "{{ linode_image }}"
      access_token: "{{ linode_token }}"
      authorized_keys:
        - "{{ ssh_pub_key }}"
      state: present
    register: created_linode

  - name: print ipv4 address
    debug:
      var: created_linode.instance.ipv4
      verbosity: 1
  - name: print ipv6 address
    debug:
      var: created_linode.instance.ipv6
      verbosity: 1
  - name: print the whole ducking thing
    debug:
      var: created_linode.instance
      verbosity: 2
  - name: print the root password
    debug:
      var: created_linode.instance.root_pass
      verbosity: 2
# TODO: create Github issues and include those in the code comments
# https://github.com/sunrisemovement/devops/issues/2
# TODO: rewrite using SSH aliases
# https://collectiveidea.com/blog/archives/2011/02/04/how-to-ssh-aliases
# https://github.com/sunrisemovement/devops/issues/4
  - name: Remove lines with unwanted occurrences of hostname
    lineinfile:
      dest: /etc/hosts
      regexp: "^(?!{{ created_linode.instance.ipv4.0|replace('.', '\\.') }}|{{ created_linode.instance.ipv6.split('/')[0] | lower }})\\S+\\s+{{ linode_label }}$"
      state: absent
    become: true
  - name: Add the server's ipv6 address to local /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ created_linode.instance.ipv6.split('/')[0] | lower }}\t{{ linode_label }}"
      state: present
    become: true
  - name: Add the server's ipv4 address to local /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ created_linode.instance.ipv4.0 }}\t{{ linode_label }}"
      state: present
    become: true
# TODO: Clear known_hosts - OK this has been done in linode_destroy
# https://github.com/sunrisemovement/devops/issues/5


# tasks on remote server once it has been created, as root #
# TODO: DISABLE RUNNING THESE TASKS IF SERVER ALREADY EXISTED (how tho?)
# https://github.com/sunrisemovement/devops/issues/9
- hosts: arch
  gather_facts: no
  vars:
    ansible_user: root

  tasks:
  - name: Don't do anything until server is reachable via SSH
    wait_for_connection:
      delay: 10
      timeout: 90
  - name: Gather facts for first time
    setup:

  - name: include user vars
    include_vars:
      file: roles/sunrise/vars/main.yml

  - name: Disallow password authentication
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication no"
      state: present
    notify: restart ssh

  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
  - name: Allow 'wheel' group to execute any command
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) ALL'
      validate: 'visudo -cf %s'

  - name: Add sudoing user accounts for all Sunrise sysadmins
    user:
      name: "{{ item.name }}"
      password: "{{ item.password }}"
      shell: "{{ item.shell }}"
      groups: wheel
      append: yes
      update_password: on_create
    loop: "{{ users }}"
    register: new_accounts
    tags: add_users

  - name: print the array of new accounts
    debug:
      var: new_accounts
      verbosity: 2

  - name: print my password
    debug:
      var: new_accounts.results[4].item.password
      verbosity: 2

  - name: Add ssh keys for all Sunrise sysadmins
    authorized_key:
      user: "{{ item.0.name }}"
      key: "{{ item.1 }}"
  # old syntax for doing loop with subelements:
  # https://docs.ansible.com/ansible/latest/plugins/lookup/subelements.html
    # with_subelements:
    #   - "{{ users }}"
    #   - sshKey
  # new syntax described here:
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#with-subelements
    loop: "{{ users|subelements('sshKey') }}"
    tags: authorized_keys

  handlers:
  - name: restart ssh
    service:
      name: sshd
      state: restarted


# tasks on remote server once it has been created, as your own user #
- hosts: arch
  become: yes
  vars: # TODO: hide password somehow, this is stupid - https://github.com/sunrisemovement/devops/issues/6
    ansible_become_pass: "correct zebra battery staple"
  tasks:
  - name: Disallow root SSH access
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
      state: present
    notify:
    - restart ssh
# change passwords last, you can't do anything else afterwards!
    - force change password
# note that handlers are executed in the order they are written down, NOT in the order they are notified
# https://stackoverflow.com/questions/35130051/order-of-notify-handlers
# TODO: make sure handlers execute in the correct order, by e.g. calling the 2nd handler from the first handler
# don't rely on the order in which handlers are written down, which seems fragile
# https://github.com/sunrisemovement/devops/issues/7

  handlers:
  - name: restart ssh
    service:
      name: sshd
      state: restarted

# IMPORTANT TODO:
# This handler currently requires the user's entry to be last in the list of users!
# Otherwise it can't finish b/c the user hasn't updated their password yet
# There must be some better way to do this that is less Nelson-specific
# https://github.com/sunrisemovement/devops/issues/8
  - name: force change password
    command: "chage -d 0 {{ item.name }}"
    when: item.changed
    loop: "{{ new_accounts.results }}"
# I might have lifted this code from this relevant GitHub issue:
# https://github.com/ansible/ansible/issues/18917#issuecomment-520254763